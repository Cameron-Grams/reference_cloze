{"version":3,"sources":["actions/actionTypes.js","reducers/reducer.js","store.js","containers/LandingPage/LandingPage.jsx","containers/InputPage/InputText.jsx","actions/textActions.js","containers/InputPage/InputPage.jsx","containers/BuildCloze/AddVocabularyWords.jsx","components/DisplayText.jsx","components/DisplayVocabulary.jsx","containers/BuildCloze/BuildCloze.jsx","containers/ConfirmCloze/FormToPrint.jsx","containers/ConfirmCloze/ConfirmCloze.jsx","App.js","serviceWorker.js","index.js"],"names":["registerOriginalText","addVocabularyWord","updateWordDisplay","reset","improperInputRecieved","initialState","errorMessage","title","originalText","paragraphs","wordObjects","vocabularyList","Reducer","state","arguments","length","undefined","action","type","actionTypes","Object","objectSpread","data","toConsumableArray","concat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","MasterReducer","combineReducers","reducer","form","formReducer","plugin","moreVocab","actionType","store","createStore","LandingPage","_this","this","react_default","a","createElement","className","id","onClick","e","props","history","push","React","Component","connect","InputText","onSubmit","handleSubmit","Field","name","component","placeholder","reduxForm","resetExercise","InputPage","enterText","values","originalTextInput","improperInput","displayError","InputPage_InputText","allWordObjects","split","filter","str","forEach","paragraph","pindex","paragraphWordArray","map","word","index","wordObject","position","originalWord","displayShowing","selected","textTitleInput","AddVocabularyWords","DisplayText","allParagraphs","paragraphArray","DisplayParagraph","item","key","event","value","displayText","DisplayVocabulary","array","holder","randomVal","lengthArr","Math","floor","random","scrambleVocab","vocab","BuildCloze","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","recognizeWord","bind","assertThisInitialized","goToConfirm","paragraphValue","positionValue","punctuation","updatedWordObjects","singleWordObject","punctuationArray","match","targetWordObject","possibleWord","vocabularyWord","wordValue","_this2","additionalVocabulary","newWord","_this3","components_DisplayVocabulary","startNew","components_DisplayText","BuildCloze_AddVocabularyWords","selectedWord","finalWord","replace","newArrayWordObjects","FormToPrint","ConfirmCloze","lib_default","trigger","content","componentRef","ConfirmCloze_FormToPrint","ref","el","App","es","BrowserRouter","Switch","Route","exact","path","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kWAAaA,EAAuB,yBAIvBC,EAAoB,sBAEpBC,EAAoB,sBAEpBC,EAAQ,QAERC,EAAwB,iDCR/BC,EAAe,CACjBC,cAAc,EACdC,MAAO,GACPC,aAAc,oBACdC,WAAY,GACZC,YAAa,CAAE,IACfC,eAAgB,IAgDLC,EA7CC,WAAoC,IAAlCC,EAAkCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1BT,EAAcY,EAAYH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChD,OAASC,EAAOC,MAEZ,KAAMC,EACF,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAP,EADP,CAEIN,MAAOU,EAAOK,KAAKf,MACnBE,WAAYQ,EAAOK,KAAKb,WACxBC,YAAaO,EAAOK,KAAKZ,YACzBJ,cAAeO,EAAMP,eAI7B,KAAMa,EACF,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAP,EADP,CAEIP,cAAeO,EAAMP,eAI7B,KAAMa,EACF,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAP,EADP,CAEIF,eAAeS,OAAAG,EAAA,EAAAH,CAAMP,EAAMF,gBAAba,OAAA,CAA6BP,EAAOK,KAAKX,mBAI/D,KAAMQ,EACF,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAP,EADP,CAEIH,YAAaO,EAAOK,KAAKZ,cAIjC,KAAMS,EACF,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAf,GAGX,QACI,OAAOQ,YC9CbY,EAAmBC,OAAOC,sCAAwCC,IAElEC,EAAgBC,YAAiB,CACnCC,QAASnB,EACToB,KAAMC,IAAYC,OAAQ,CACtBC,UAAW,SAAEtB,EAAOI,GAChB,OAAQA,EAAOC,MACX,KAAKkB,EACD,OAEJ,QACI,OAAOvB,QAWZwB,EALDC,YACVT,EACAJ,KCrBEc,mLACO,IAAAC,EAAAC,KACL,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sKAEAF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,kBACRJ,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,2FACAF,EAAAC,EAAAC,cAAA,4GACAF,EAAAC,EAAAC,cAAA,gGACAF,EAAAC,EAAAC,cAAA,4GACAF,EAAAC,EAAAC,cAAA,yFACAF,EAAAC,EAAAC,cAAA,2FAGHF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeE,QAAU,SAAAC,GAAC,OAAIR,EAAKS,MAAMC,QAAQC,KAAM,iBAAzE,kCAnBcC,IAAMC,WA+BjBC,cAJS,SAAEzC,GAAF,OAAAO,OAAAC,EAAA,EAAAD,CAAA,GACjBP,IAGkC,GAA1ByC,CAAgCf,mBC/B3CgB,EAAY,SAAEN,GACd,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAWW,SAAWP,EAAMQ,cACxCf,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAEc,EAAA,EAAF,CAAQb,UAAY,yBAAyBc,KAAK,iBAAiBC,UAAY,QAAUC,YAAY,oBAC1GnB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAEc,EAAA,EAAF,CAAQb,UAAY,yBAAyBc,KAAK,oBAAoBC,UAAY,WAAaC,YAAY,mBAChHnB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAe3B,KAAK,UAAtC,gBAUGqC,EAJfA,EAAYO,YAAU,CAClB9B,KAAM,aADE8B,CAERP,GCqDG,SAASQ,IACZ,MAAO,CACH7C,KAAMC,aClER6C,6MAEFC,UAAY,SAAEC,GACDA,EAAOC,mBACR3B,EAAKS,MAAMjD,qBAAsBkE,GACjC1B,EAAKS,MAAMC,QAAQC,KAAM,iBAEzBX,EAAKS,MAAMmB,yFAKnB,IAAIC,EAAe5B,KAAKQ,MAAM3C,aAC1BoC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,8BACA,KAEJ,OACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,0DAEEyB,EAEF3B,EAAAC,EAAAC,cAAE0B,EAAF,CAAYd,SAAWf,KAAKwB,qBAxBhBb,IAAMC,WAmCfC,cAJS,SAAEzC,GAAF,MAAc,CAClCP,aAAcO,EAAMkB,QAAQzB,eAGS,CAAEN,qBDvCpC,SAA+BkE,GAElC,IAAIzD,EAAa,GACb8D,EAAiB,GAECL,EAAOC,kBAAkBK,MAAO,MAEfC,OAAQ,SAAAC,GAAG,MAAY,KAARA,IAErCC,QAAS,SAAEC,EAAWC,GACnC,IAEMC,EAFmBF,EAAUJ,MAAO,KAEEO,IAAK,SAAEC,EAAMC,GACrD,IAAIC,EAAa,GASjB,OAPAA,EAAWN,UAAYC,EACvBK,EAAWC,SAAWF,EACtBC,EAAWE,aAAeJ,EAC1BE,EAAWG,eAAiBL,EAC5BE,EAAWI,UAAW,EAEtBf,EAAepB,KAAM+B,GACdA,IAGX,OADAzE,EAAW0C,KAAM2B,GACVrE,IAGX,IAAMF,EAAQ2D,EAAOqB,eAErB,MAAM,CACFrE,KAAMC,EACNG,KAAKF,OAAAC,EAAA,EAAAD,CAAA,GACE8C,EADH,CAEA3D,MAAOA,EACPG,YAAkB6D,EAAP/C,SACXf,WAAiBA,EAAPe,aCG2C4C,cDE1D,WACH,MAAO,CACHlD,KAAMC,KCJCmC,CAAqEU,WCtChFwB,EAAqB,SAAEvC,GACvB,OACIP,EAAAC,EAAAC,cAAA,QAAMY,SAAWP,EAAMQ,cACnBf,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAEc,EAAA,EAAF,CAAQb,UAAY,oCAAoCc,KAAK,uBAAuBC,UAAY,QAAUC,YAAY,sCAC3HnB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAe3B,KAAK,UAAtC,0BASGsE,EAJfA,EAAqB1B,YAAU,CAC3B9B,KAAM,aADW8B,CAEjB0B,GCOWC,EAnBK,SAAExC,GAAF,OAAeA,EAAMyC,cAAgBX,IAAK,SAAEY,EAAgBd,GAE5E,IAAIe,EAAmBD,EAAeZ,IAAK,SAAAc,GAEnC,OAASnD,EAAAC,EAAAC,cAAA,QACGC,UAAU,WACVC,GAAE,aAAAtB,OAAiBqE,EAAKjB,UAAtB,UAAApD,OAA0CqE,EAAKV,UACjDW,IAAMD,EAAKV,SACXpC,QAAU,SAAAgD,GAAK,OAAI9C,EAAMF,QAAS8C,EAAKjB,UAAWiB,EAAKV,WACvDa,MAAQH,EAAKI,aACXJ,EAAKR,eAAkB,OAIzC,OACI3C,EAAAC,EAAAC,cAAA,KAAGC,UAAYI,EAAMJ,UAAYiD,IAAMjB,GAAWe,MCiB/CM,EAlBW,SAAEjD,GAIxB,OAjBkB,SAAEkD,GAGpB,IAFA,IAA8BC,EAAQC,EAAlCC,EAAYH,EAAMpF,OAEduF,GACJD,EAAYE,KAAKC,MAAOD,KAAKE,SAAWH,KACxCF,EAASD,EAAOG,GAChBH,EAAOG,GAAcH,EAAOE,GAC5BF,EAAOE,GAAcD,EAGzB,OAAOD,EAKYO,CAAezD,EAAM0D,OAEf5B,IAAK,SAAEC,EAAMC,GAC9B,OACIvC,EAAAC,EAAAC,cAAA,QACIC,UAAU,iBACViD,IAAMb,GAEJD,EAAO,QCfvB4B,qBAEF,SAAAA,EAAa3D,GAAO,IAAAT,EAAA,OAAApB,OAAAyF,EAAA,EAAAzF,CAAAqB,KAAAmE,IAChBpE,EAAApB,OAAA0F,EAAA,EAAA1F,CAAAqB,KAAArB,OAAA2F,EAAA,EAAA3F,CAAAwF,GAAAI,KAAAvE,KAAOQ,KACFgE,cAAgBzE,EAAKyE,cAAcC,KAAnB9F,OAAA+F,EAAA,EAAA/F,QAAA+F,EAAA,EAAA/F,CAAAoB,KACrBA,EAAKL,UAAYK,EAAKL,UAAU+E,KAAf9F,OAAA+F,EAAA,EAAA/F,QAAA+F,EAAA,EAAA/F,CAAAoB,KACjBA,EAAK4E,YAAc5E,EAAK4E,YAAYF,KAAjB9F,OAAA+F,EAAA,EAAA/F,QAAA+F,EAAA,EAAA/F,CAAAoB,KAJHA,6EAOL6E,EAAgBC,GAC3B,IAAIC,EAAc,KACdC,EAAqB/E,KAAKQ,MAAMvC,YAAYqE,IAAK,SAAA0C,GACjD,GAAOA,EAAiB7C,YAAcyC,GAAsBI,EAAiBtC,WAAamC,EAAkB,CACxG,IAAII,EAAmBD,EAAiBrC,aAAauC,MAAM,8CAA6C,IAEpGJ,EADCG,EACaA,EAAkB,GAElB,GAElBD,EAAiBpC,eAAiB,gBAAkBkC,EAExD,OAAOE,IAEPG,EAAmBnF,KAAKQ,MAAMvC,YAAY+D,OAAQ,SAAAoD,GAAY,OAC3DA,EAAajD,YAAcyC,GAAkBQ,EAAa1C,WAAamC,IAG9E7E,KAAKQ,MAAM/C,kBAAmBsH,GAC9B/E,KAAKQ,MAAM6E,eAAgBF,EAAkB,GAAIxC,gDAG1C2C,GAAW,IAAAC,EAAAvF,KACCsF,EAAUE,qBAAqBzD,MAAO,KAC5CG,QAAS,SAAEuD,GAAF,OAAeF,EAAK/E,MAAM6E,eAAgBI,2CAIhEzF,KAAKQ,MAAMC,QAAQC,KAAM,qDAIzBV,KAAKQ,MAAMC,QAAQC,KAAM,cACzBV,KAAKQ,MAAMc,iDAGN,IAAAoE,EAAA1F,KAEDkE,EAAUlE,KAAKQ,MAAMtC,eAAeI,QAAU,EACxC2B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAEwF,EAAF,CAAoBzB,MAAQlE,KAAKQ,MAAMtC,mBAChE,KAElB,OACA+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAME,GAAG,aACLJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,2BAA2BE,QAAU,SAAAC,GAAC,OAAImF,EAAKE,aAAjE,cACA3F,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeE,QAAUN,KAAK2E,aAAhD,gCAEJ1E,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,gBACAH,EAAAC,EAAAC,cAAE0F,EAAF,CAAczF,UAAY,oBAAqB6C,cAAgBjD,KAAKQ,MAAMxC,WAAasC,QAAU,SAAE6B,EAAWO,GAAb,OAA2BgD,EAAKlB,cAAerC,EAAWO,MACzJwB,EACFjE,EAAAC,EAAAC,cAAE2F,EAAF,CAAqB/E,SAAWf,KAAKN,qBA/D5BiB,IAAMC,YA6EhBC,cANS,SAAEzC,GAAF,MAAe,CACnCJ,WAAYI,EAAMkB,QAAQtB,WAC1BC,YAAaG,EAAMkB,QAAQrB,YAC3BC,eAAgBE,EAAMkB,QAAQpB,iBAGO,CAAEmH,eLtCpC,SAAyBU,GAC5B,IAAIC,EAAYD,EAAaE,QAAQ,8CAA6C,IAElF,MAAO,CACHxH,KAAMC,EACNG,KAAM,CACFX,eAAgB8H,KKgC+BvI,kBL3BpD,SAA4ByI,GAC/B,MAAQ,CACJzH,KAAMC,EACNG,KAAK,CACDZ,YAAaiI,KKuBqD5E,iBAA/DT,CAAkFsD,oBClF3FgC,0LAIE,OACAlG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAClBH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,qBACJJ,EAAAC,EAAAC,cAAA,MAAIE,GAAG,cAAgBL,KAAKQ,MAAM1C,OAClCmC,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,KAAIC,UAAU,eAAcH,EAAAC,EAAAC,cAAEwF,EAAF,CAAoBzB,MAAQlE,KAAKQ,MAAMtC,kBACnE+B,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAG0F,EAAH,CAAezF,UAAY,cAAgB6C,cAAgBjD,KAAKQ,MAAMxC,WAAasC,QAAU,SAAAC,GAAC,OAAI,kBAZxFI,IAAMC,YA2BjBC,cANS,SAAEzC,GAAF,MAAe,CACnCN,MAAOM,EAAMkB,QAAQxB,MACrBE,WAAYI,EAAMkB,QAAQtB,WAC1BE,eAAgBE,EAAMkB,QAAQpB,iBAGO,GAA1B2C,CAAgCsF,GC1BzCC,cACJ,SAAAA,EAAa5F,GAAO,IAAAT,EAAA,OAAApB,OAAAyF,EAAA,EAAAzF,CAAAqB,KAAAoG,IAClBrG,EAAApB,OAAA0F,EAAA,EAAA1F,CAAAqB,KAAArB,OAAA2F,EAAA,EAAA3F,CAAAyH,GAAA7B,KAAAvE,KAAOQ,KACFoF,SAAW7F,EAAK6F,SAASnB,KAAd9F,OAAA+F,EAAA,EAAA/F,QAAA+F,EAAA,EAAA/F,CAAAoB,KAFEA,0EAMlBC,KAAKQ,MAAMC,QAAQC,KAAM,cACzBV,KAAKQ,MAAMc,iDAGJ,IAAAiE,EAAAvF,KACP,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAME,GAAG,aACTJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,2BAA2BE,QAAU,SAAAC,GAAC,OAAIgF,EAAKK,aAAjE,cACA3F,EAAAC,EAAAC,cAAA,UAAQC,UAAU,2BAA2BE,QAAU,SAAAC,GAAC,OAAIgF,EAAK/E,MAAMC,QAAQC,KAAM,iBAArF,qBACAT,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CACEoG,QAAS,kBAAMrG,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAAlB,qBACrBmG,QAAS,kBAAMhB,EAAKiB,iBAGtBvG,EAAAC,EAAAC,cAACsG,EAAD,CAAaC,IAAK,SAAAC,GAAE,OAAKpB,EAAKiB,aAAeG,aAtB1BhG,IAAMC,WAgClBC,cAJS,SAAEzC,GAAF,OAAAO,OAAAC,EAAA,EAAAD,CAAA,GACnBP,IAGoC,CAAEkD,iBAA5BT,CAA8CuF,GCX9CQ,0LAfX,OACE3G,EAAAC,EAAAC,cAAE0G,EAAA,EAAF,CAAWjH,MAAQA,GACnBK,EAAAC,EAAAC,cAAE2G,EAAA,EAAF,KACE7G,EAAAC,EAAAC,cAAE4G,EAAA,EAAF,KACI9G,EAAAC,EAAAC,cAAE6G,EAAA,EAAF,CAAQC,OAAK,EAACC,KAAK,IAAI/F,UAAYrB,IAClCG,EAAAC,EAAAC,cAAE6G,EAAA,EAAF,CAAQC,OAAK,EAACC,KAAK,cAAc/F,UAAYI,IAC7CtB,EAAAC,EAAAC,cAAE6G,EAAA,EAAF,CAAQC,OAAK,EAACC,KAAK,eAAe/F,UAAYgD,IAC9ClE,EAAAC,EAAAC,cAAE6G,EAAA,EAAF,CAAQC,OAAK,EAACC,KAAK,iBAAiB/F,UAAYiF,cAT3CxF,cCCEuG,QACW,cAA7BlI,OAAOmI,SAASC,UAEe,UAA7BpI,OAAOmI,SAASC,UAEhBpI,OAAOmI,SAASC,SAASnC,MACvB,2DCZNoC,IAASC,OAAOtH,EAAAC,EAAAC,cAACqH,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.48e90631.chunk.js","sourcesContent":["export const registerOriginalText = 'REGISTER_ORIGINAL_TEXT';\n\nexport const loadOriginalWords = 'LOAD_ORIGINAL_WORDS'; \n\nexport const addVocabularyWord = 'ADD_VOCABULARY_WORD'; \n\nexport const updateWordDisplay = 'UPDATE_WORD_DISPLAY'; \n\nexport const reset = 'RESET'; \n\nexport const improperInputRecieved = 'IMPROPER_INPUT_RECEIVED'; ","import * as actionTypes from '../actions/actionTypes'; \n\nconst initialState = {\n    errorMessage: false,\n    title: \"\",\n    originalText: \" Mystery Text... \",\n    paragraphs: [], \n    wordObjects: [ {} ],\n    vocabularyList: [ ]   \n};\n\nconst Reducer = ( state = initialState, action ) => {\n    switch ( action.type ){\n\n        case( actionTypes.registerOriginalText ):{\n            return { \n                ...state,\n                title: action.data.title,\n                paragraphs: action.data.paragraphs,\n                wordObjects: action.data.wordObjects,\n                errorMessage: !state.errorMessage\n            }\n        }\n\n        case( actionTypes.improperInputRecieved ): {\n            return {\n                ...state,\n                errorMessage: !state.errorMessage\n            }\n        }\n\n        case( actionTypes.addVocabularyWord ): {\n            return {\n                ...state,\n                vocabularyList: [ ...state.vocabularyList, action.data.vocabularyList ]\n            }\n        }\n\n        case( actionTypes.updateWordDisplay ): {\n            return {\n                ...state,\n                wordObjects: action.data.wordObjects\n            }\n        }\n\n        case( actionTypes.reset ): {\n            return {\n                ...initialState\n            }\n        }\n        default:\n            return state\n        ;\n    }\n};\n\nexport default Reducer; ","import * as actionType from './actions/actionTypes'; \nimport { combineReducers, createStore, compose } from 'redux'; \nimport Reducer from './reducers/reducer';\nimport { reducer as formReducer } from 'redux-form'; \n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst MasterReducer = combineReducers( {\n    reducer: Reducer,\n    form: formReducer.plugin( {\n        moreVocab: ( state, action ) => {\n            switch( action.type ){\n                case actionType.addVocabularyWord:{\n                    return undefined \n                }\n                default:\n                    return state\n            }\n        }\n    })\n})\n\nconst store = createStore(\n    MasterReducer,\n    composeEnhancers()\n)\n\nexport default store;","import React from 'react';\nimport { connect } from 'react-redux'; \n\nclass LandingPage extends React.Component{\n    render() {\n        return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n            <div className=\"landingDiv\" >\n            <h3>Introduction</h3> \n            <p>This site is a web-based tool for teachers to create Cloze ( fill in the blanks ) exercises.  Advance through the pages\n                and complete the following steps:</p>\n            <div id=\"landingListDiv\">  \n            <ul>\n               <li>Chose a title for the exercise and enter the title into the \"Exercise Title\".</li>\n               <li>Copy and paste the original text into the \"Exercise Text\" area and advance to Build the Cloze.</li>     \n               <li>Select the words to remove from the original text and add to the vocabulary words.</li>     \n               <li>Add additional vocabulary words that students can consider for the exercise, such as synonyms.</li>     \n               <li>Advance to observe the exercise worksheet, return to edit or confirm print.</li>     \n               <li>Print the worksheet or save it as a pdf under the selection of the printer.</li>     \n            </ul> \n            </div>\n            <button className=\"submitButton\" onClick={ e => this.props.history.push( '/input-text' ) } >Advace to Input Text</button>\n            </div>\n            </header>\n        </div>\n        );\n    }\n}\n\nconst mapStateToProps = ( state ) => ( {\n    ...state\n})\n\nexport default connect( mapStateToProps, {} )( LandingPage );","import React from 'react';\nimport { Field, reduxForm } from 'redux-form'; \n\nlet InputText = ( props ) => {\n    return(\n        <div className=\"overallFormDiv\" >  \n        <form className=\"textForm\" onSubmit={ props.handleSubmit } >\n            <div>< Field className = \"textTitle generalInput\" name=\"textTitleInput\" component={ \"input\" } placeholder=\"Exercise Title\"   /></div>\n            <div>< Field className = \"textField generalInput\" name=\"originalTextInput\" component={ \"textarea\" } placeholder=\"Exercise Text\"   /></div>\n            <button className=\"submitButton\" type=\"submit\" >Next Step</button>\n        </form>\n        </div>\n    )\n}\n\nInputText = reduxForm({\n    form: 'InputText'\n})( InputText );\n\nexport default InputText;","import * as actionTypes from './actionTypes';\n\nexport function registerOriginalText( values ){\n\n    let paragraphs = [];\n    let allWordObjects = [];\n\n    let dirtyParagraphs = values.originalTextInput.split( \"\\n\" ); \n\n    let paragraphStrings = dirtyParagraphs.filter( str => str !== \"\" ); \n\n    paragraphStrings.forEach( ( paragraph, pindex ) => {\n        const wordsInParagraph = paragraph.split( \" \" );\n\n        const paragraphWordArray = wordsInParagraph.map( ( word, index ) => {\n            let wordObject = {};\n\n            wordObject.paragraph = pindex;\n            wordObject.position = index;\n            wordObject.originalWord = word;\n            wordObject.displayShowing = word;\n            wordObject.selected = false;\n            \n            allWordObjects.push( wordObject ); \n            return wordObject;\n        } ); \n        paragraphs.push( paragraphWordArray ); \n        return paragraphs; \n    }); \n\n    const title = values.textTitleInput;\n\n    return{\n        type: actionTypes.registerOriginalText,\n        data: { \n            ...values,\n            title: title, \n            wordObjects: [ ...allWordObjects ],\n            paragraphs: [ ...paragraphs ] \n        }\n    }\n};\n\nexport function improperInput(){\n    return {\n        type: actionTypes.improperInputRecieved\n    }\n}\n\n\nexport function vocabularyWord( selectedWord ){\n    let finalWord = selectedWord.replace(/['!\"#$%&\\\\'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~']/g,\"\");\n\n    return({\n        type: actionTypes.addVocabularyWord,\n        data: {\n            vocabularyList: finalWord \n        }\n    })\n}; \n\nexport function updateWordDisplay( newArrayWordObjects ){\n    return( {\n        type: actionTypes.updateWordDisplay,\n        data:{\n            wordObjects: newArrayWordObjects\n        }\n    })\n}\n\nexport function resetExercise(){\n    return({\n        type: actionTypes.reset\n    })\n}","import React from 'react';\nimport { connect } from 'react-redux'; \nimport InputText from './InputText'; \nimport { registerOriginalText, improperInput } from '../../actions/textActions';\nimport './InputPage.css'; \n\nclass InputPage extends React.Component{\n\n    enterText = ( values ) => {\n            if ( values.originalTextInput ){\n                this.props.registerOriginalText( values );\n                this.props.history.push( \"/build-cloze\" );\n            } else {\n                this.props.improperInput(); \n            }\n        }\n\n    render() {\n        let displayError = this.props.errorMessage ? \n            <p className=\"errorMessage\" >Please Enter Exercise Text</p>:\n            null; \n\n        return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n            <h2>Input Text:</h2> \n            <p>Add a title and text to create the worksheet:</p>\n\n            { displayError } \n            \n            < InputText onSubmit={ this.enterText } /> \n            </header>\n        </div>\n        );\n    }\n}\n\nconst mapStateToProps = ( state ) => ({\n    errorMessage: state.reducer.errorMessage\n})\n\nexport default connect( mapStateToProps, { registerOriginalText, improperInput } )( InputPage );","import React from 'react';\nimport { Field, reduxForm } from 'redux-form'; \n\nlet AddVocabularyWords = ( props ) => {\n    return(\n        <form onSubmit={ props.handleSubmit } >\n            <div>< Field className = \"newVocab generalInput targetTitle\" name=\"additionalVocabulary\" component={ \"input\" } placeholder=\"Enter Additonal Vocabulary Words\"   /></div>\n            <button className=\"submitButton\" type=\"submit\" >Add Vocabulary Words</button>\n        </form>\n    )\n}\n\nAddVocabularyWords = reduxForm({\n    form: 'moreVocab'\n})( AddVocabularyWords );\n\nexport default AddVocabularyWords;","import React from 'react'; \n\nconst DisplayText = ( props ) => ( props.allParagraphs ).map( ( paragraphArray, pindex ) => {\n\n    let DisplayParagraph = paragraphArray.map( item => {\n\n            return(  <span \n                        className=\"wordSpan\" \n                        id={ `paragraph_${ item.paragraph }_word_${ item.position }` } \n                        key={ item.position } \n                        onClick={ event => props.onClick( item.paragraph, item.position ) } \n                        value={ item.displayText }>\n                        { item.displayShowing }{ \" \" } \n                    </span> )\n            } ); \n        \n        return(\n            <p className={ props.className } key={ pindex }>{ DisplayParagraph }</p>\n        )\n    })\n\nexport default DisplayText; ","import React from 'react';\n\n// the knuth-fisher-yates algorithm: https://bost.ocks.org/mike/shuffle/ \nconst scrambleVocab = ( array ) => {\n    let lengthArr = array.length, holder, randomVal;\n\n    while ( lengthArr ){\n        randomVal = Math.floor( Math.random() * lengthArr-- );\n        holder = array[ lengthArr ];\n        array[ lengthArr ] = array[ randomVal ];\n        array[ randomVal ] = holder;\n    }\n\n    return array; \n}\n\nconst DisplayVocabulary = ( props ) => {\n    \n    let displayArray = scrambleVocab( props.vocab );  \n    \n    return( ( displayArray ).map( ( word, index ) => {\n            return(\n                <span \n                    className=\"vocabularySpan\" \n                    key={ index } >\n                \n                    { word }{\" \"}\n\n                </span>\n            )\n    }) \n    );\n}\n\nexport default DisplayVocabulary; ","import React from 'react';\nimport { connect } from 'react-redux'; \nimport {  vocabularyWord, \n          updateWordDisplay,\n          resetExercise           \n        } from '../../actions/textActions'; \nimport AddVocabularyWords from './AddVocabularyWords'; \nimport DisplayText from '../../components/DisplayText'; \nimport DisplayVocabulary from '../../components/DisplayVocabulary'; \nimport './BuildCloze.css'; \n\nclass BuildCloze extends React.Component{\n\n    constructor( props ){\n        super( props );\n        this.recognizeWord = this.recognizeWord.bind( this ); \n        this.moreVocab = this.moreVocab.bind( this ); \n        this.goToConfirm = this.goToConfirm.bind( this ); \n    };\n    \n    recognizeWord( paragraphValue, positionValue ){\n        let punctuation = null;\n        let updatedWordObjects = this.props.wordObjects.map( singleWordObject => {\n            if ( ( singleWordObject.paragraph === paragraphValue ) && ( singleWordObject.position === positionValue ) ) {\n                let punctuationArray = singleWordObject.originalWord.match(/['!\"#$%&\\\\'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~']/g,\"\")\n                if ( punctuationArray ){\n                    punctuation = punctuationArray[ 0 ];\n                } else {\n                    punctuation = \"\"; \n                }\n                singleWordObject.displayShowing = '_____________' + punctuation; \n            };\n            return singleWordObject; \n        })\n        let targetWordObject = this.props.wordObjects.filter( possibleWord => \n            (  possibleWord.paragraph === paragraphValue && possibleWord.position === positionValue )\n        )\n\n        this.props.updateWordDisplay( updatedWordObjects );  \n        this.props.vocabularyWord( targetWordObject[ 0 ].originalWord ); \n    }\n\n    moreVocab( wordValue ){\n        let newWordArray = wordValue.additionalVocabulary.split( \" \" );\n        newWordArray.forEach( ( newWord ) => this.props.vocabularyWord( newWord ) ); \n    }\n\n    goToConfirm(){\n        this.props.history.push( '/confirm-cloze' ); \n    }\n\n    startNew(){\n        this.props.history.push( 'input-text' ); \n        this.props.resetExercise();\n    }\n\n    render() {\n\n        let vocab = ( this.props.vocabularyList.length >= 1 ) ? \n                  <div>\n                    <h3>Text Vocbaulary:</h3>\n                    <p className=\"displayForVocab\">< DisplayVocabulary vocab={ this.props.vocabularyList } /></p>\n                  </div>: null; \n\n        return (\n        <div className=\"ClozeDiv App\">\n            <div  id=\"buttonDiv\" >\n                <button className=\"clozeButton submitButton\" onClick={ e => this.startNew() } >Start Over</button>\n                <button className=\"submitButton\" onClick={ this.goToConfirm } >Confirm Worksheet and Print</button>\n            </div>\n            <header className=\"App-header\">\n                <h3 className=\"targetTitle\">Target Text:</h3>\n                < DisplayText className={ \"displayTargetText\"} allParagraphs={ this.props.paragraphs } onClick={ ( paragraph, position ) => this.recognizeWord( paragraph, position )}    /> \n                { vocab }\n                < AddVocabularyWords onSubmit={ this.moreVocab } />\n            </header>\n        </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = ( state ) => ( {\n    paragraphs: state.reducer.paragraphs,\n    wordObjects: state.reducer.wordObjects,\n    vocabularyList: state.reducer.vocabularyList\n})\n\nexport default connect( mapStateToProps, { vocabularyWord, updateWordDisplay, resetExercise } )( BuildCloze );","import React from 'react';\nimport { connect } from 'react-redux'; \nimport DisplayText from '../../components/DisplayText'; \nimport DisplayVocabulary from '../../components/DisplayVocabulary'; \nimport './ConfirmCloze.css';\n\nclass FormToPrint extends React.Component{\n\n    render() {\n\n        return (\n        <div className=\"finalForm\">\n            <header className=\"finalForm-header\">\n            <div id=\"printComponentDiv\">  \n                <h2 id=\"finalTitle\" >{ this.props.title }</h2>\n                <h4>Exercise Vocabulary:</h4>\n                <p  className=\"textToPrint\">< DisplayVocabulary vocab={ this.props.vocabularyList } /></p>\n                <h4>Exercise Text:</h4>\n                <  DisplayText className={ \"textToPrint\" } allParagraphs={ this.props.paragraphs } onClick={ e => null } />\n            </div>\n            </header>\n        </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = ( state ) => ( {\n    title: state.reducer.title,\n    paragraphs: state.reducer.paragraphs,\n    vocabularyList: state.reducer.vocabularyList\n})\n\nexport default connect( mapStateToProps, {} )( FormToPrint ); \n\n","import React from 'react';\nimport { connect } from 'react-redux'; \nimport { resetExercise } from '../../actions/textActions'; \nimport ReactToPrint from 'react-to-print';\nimport FormToPrint from './FormToPrint'; \nimport './ConfirmCloze.css';\n\nclass ConfirmCloze extends React.Component {\n  constructor( props ){\n    super( props );\n    this.startNew = this.startNew.bind( this ); \n  }\n\n  startNew(){\n    this.props.history.push( 'input-text' ); \n    this.props.resetExercise();\n  }\n\n  render() {\n    return (\n      <div  >\n        <div  id=\"buttonDiv\" >\n        <button className=\"clozeButton submitButton\" onClick={ e => this.startNew() } >Start Over</button>\n        <button className=\"clozeButton submitButton\" onClick={ e => this.props.history.push( 'build-cloze' ) } >Return to editing</button>\n        <ReactToPrint\n          trigger={() => <div ><button className=\"clozeButton submitButton\" >Print this form</ button ></div> }\n          content={() => this.componentRef}\n        />\n        </div>\n        <FormToPrint ref={el => (this.componentRef = el)} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ( state ) => ( {\n  ...state\n})\n\nexport default connect( mapStateToProps, { resetExercise })( ConfirmCloze ); \n\n\n\n// scramble the vocabulary before printing  https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n// also work on the colors  http://colormind.io/bootstrap/ ","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux'; \nimport store from './store'; \nimport LandingPage from './containers/LandingPage/LandingPage'; \nimport InputPage from './containers/InputPage/InputPage';\nimport BuildCloze from './containers/BuildCloze/BuildCloze';\nimport ConfirmCloze from './containers/ConfirmCloze/ConfirmCloze'; \n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      < Provider store={ store } > \n      < BrowserRouter >\n        < Switch >\n            < Route exact path=\"/\" component={ LandingPage } />         \n             < Route exact path=\"/input-text\" component={ InputPage } />       \n             < Route exact path=\"/build-cloze\" component={ BuildCloze } />\n             < Route exact path=\"/confirm-cloze\" component={ ConfirmCloze } />\n        </Switch> \n      </BrowserRouter>   \n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}